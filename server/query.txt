SELECT candidate_id, COUNT(*) AS votes_count
FROM vote
WHERE poll_id = ? -- Replace '?' with the specific poll ID
GROUP BY candidate_id;

SELECT candidate_id, COUNT(*) AS votes_count
FROM vote
WHERE poll_id = ? -- Replace '?' with the specific poll ID
GROUP BY candidate_id
ORDER BY votes_count DESC
LIMIT 1;

SELECT poll_id, COUNT(*) AS total_votes
FROM vote
GROUP BY poll_id;

SELECT candidate_id, COUNT(*) AS votes_count
FROM vote
WHERE poll_id = ? -- Replace '?' with the specific poll ID
GROUP BY candidate_id
HAVING COUNT(*) = (
  SELECT MAX(votes_counts.max_count)
  FROM (
    SELECT COUNT(*) as max_count
    FROM vote
    WHERE poll_id = ? -- Replace '?' with the same specific poll ID
    GROUP BY candidate_id
  ) as votes_counts
);

WITH CandidateVotes AS (
  SELECT candidate_id, COUNT(*) AS votes_count
  FROM vote
  WHERE poll_id = ? -- Replace '?' with the specific poll ID
  GROUP BY candidate_id
),
MaxVotes AS (
  SELECT MAX(votes_count) AS max_votes_count
  FROM CandidateVotes
)
SELECT cv.candidate_id, cv.votes_count
FROM CandidateVotes cv
JOIN MaxVotes mv ON cv.votes_count = mv.max_votes_count;

const votesPerCandidate = await prisma.vote.groupBy({
  by: ['candidate_id'],
  where: {
    poll_id: pollId, // Replace 'pollId' with the actual poll ID
  },
  _count: {
    candidate_id: true,
  },
});

const leadingCandidates = await prisma.vote.groupBy({
  by: ['candidate_id'],
  where: {
    poll_id: pollId, // Replace 'pollId' with the actual poll ID
  },
  _count: {
    candidate_id: true,
  },
  orderBy: {
    _count: {
      candidate_id: 'desc',
    },
  },
}).then(groupedVotes => {
  // Determine the highest vote count
  const highestVotes = groupedVotes.length ? groupedVotes[0]._count.candidate_id : 0;

  // Filter to include all candidates with the highest vote count (ties included)
  return groupedVotes.filter(vote => vote._count.candidate_id === highestVotes);
});

const totalVotesPerPoll = await prisma.vote.groupBy({
  by: ['poll_id'],
  _count: {
    poll_id: true,
  },
});
